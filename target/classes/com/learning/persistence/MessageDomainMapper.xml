<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.learning.persistence.MessageDomainMapper" >
  <resultMap id="BaseResultMap" type="com.learning.domain.MessageDomain" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="uuid" property="uuid" jdbcType="VARCHAR" />
    <result column="sender" property="sender" jdbcType="VARCHAR" />
    <result column="receiver" property="receiver" jdbcType="VARCHAR" />
    <result column="send" property="send" jdbcType="INTEGER" />
    <result column="content" property="content" jdbcType="VARCHAR" />
    <result column="hasRead" property="hasread" jdbcType="INTEGER" />
    <result column="created_at" property="createdAt" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, uuid, sender, receiver, send, content, hasRead, created_at
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from message
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from message
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.learning.domain.MessageDomain" >
    insert into message (id, uuid, sender, 
      receiver, send, content, 
      hasRead, created_at)
    values (#{id,jdbcType=INTEGER}, #{uuid,jdbcType=VARCHAR}, #{sender,jdbcType=VARCHAR}, 
      #{receiver,jdbcType=VARCHAR}, #{send,jdbcType=INTEGER}, #{content,jdbcType=VARCHAR}, 
      #{hasread,jdbcType=INTEGER}, #{createdAt,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.learning.domain.MessageDomain" >
    insert into message
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="uuid != null" >
        uuid,
      </if>
      <if test="sender != null" >
        sender,
      </if>
      <if test="receiver != null" >
        receiver,
      </if>
      <if test="send != null" >
        send,
      </if>
      <if test="content != null" >
        content,
      </if>
      <if test="hasread != null" >
        hasRead,
      </if>
      <if test="createdAt != null" >
        created_at,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="uuid != null" >
        #{uuid,jdbcType=VARCHAR},
      </if>
      <if test="sender != null" >
        #{sender,jdbcType=VARCHAR},
      </if>
      <if test="receiver != null" >
        #{receiver,jdbcType=VARCHAR},
      </if>
      <if test="send != null" >
        #{send,jdbcType=INTEGER},
      </if>
      <if test="content != null" >
        #{content,jdbcType=VARCHAR},
      </if>
      <if test="hasread != null" >
        #{hasread,jdbcType=INTEGER},
      </if>
      <if test="createdAt != null" >
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.learning.domain.MessageDomain" >
    update message
    <set >
      <if test="uuid != null" >
        uuid = #{uuid,jdbcType=VARCHAR},
      </if>
      <if test="sender != null" >
        sender = #{sender,jdbcType=VARCHAR},
      </if>
      <if test="receiver != null" >
        receiver = #{receiver,jdbcType=VARCHAR},
      </if>
      <if test="send != null" >
        send = #{send,jdbcType=INTEGER},
      </if>
      <if test="content != null" >
        content = #{content,jdbcType=VARCHAR},
      </if>
      <if test="hasread != null" >
        hasRead = #{hasread,jdbcType=INTEGER},
      </if>
      <if test="createdAt != null" >
        created_at = #{createdAt,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.learning.domain.MessageDomain" >
    update message
    set uuid = #{uuid,jdbcType=VARCHAR},
      sender = #{sender,jdbcType=VARCHAR},
      receiver = #{receiver,jdbcType=VARCHAR},
      send = #{send,jdbcType=INTEGER},
      content = #{content,jdbcType=VARCHAR},
      hasRead = #{hasread,jdbcType=INTEGER},
      created_at = #{createdAt,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>